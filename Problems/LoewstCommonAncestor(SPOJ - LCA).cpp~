#include <bits/stdc++.h>
using namespace std;
 
#define DEBUG if(1)
#define MAXN 50500
#define MAX INT_MAX
#define MAXLL LLONG_MAX
#define MAXU ULLONG_MAX
#define MIN -2000000
#define endl "\n"
#define INF 99999999
#define MOD 1000000007
#define s(n) scanf("%d", &n)
#define ss(a,b) scanf("%d %d",&a,&b)
#define pb push_back
#define mp make_pair
#define M_PI 3.14159265358979323846
#define sz(a) int(a.size())
#define lli long long int
#define rep(i,a,n) for (int i=a;i<n;i++)
#define ler(a,n,vec) for(int i=0;i<n;i++)s(a), vec.pb(a)
typedef vector<lli> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef pair<string, pair<int, char> > ps;
#define DEBUG if(1)
#define F first
#define S second
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
int ddx[] = {1, 0};
int ddy[] = {1, 1};

//LCA CodCad
#define MAXN 1001
#define MAXL 20

int n;
int nivel[MAXN];
int ancestral[MAXN][MAXL];
int pai[MAXN];

vi adj[MAXN];


void dfs(int u){

	for(int i=0;i<sz(adj[u]);i++){
		int v = adj[u][i];
		if(nivel[v] == -1){
			pai[v] = u;
			nivel[v] = nivel[u] + 1;
			dfs(v);
		}
	}
}

void build(){
	memset(pai, -1, sizeof pai);
	memset(nivel, -1, sizeof nivel);
	memset(ancestral, -1, sizeof ancestral);

	nivel[1] = 0;
	dfs(1);

	for(int i=1;i<=n;i++) ancestral[i][0] = pai[i];

	for(int j=1;j<MAXL;j++){
		for(int i=1;i<=n;i++){
			ancestral[i][j] = ancestral[ancestral[i][j-1]][j-1];
		}
	}
}

int LCA(int u, int v){
	if(nivel[u] < nivel[v]) swap(u, v);
	for(int i = MAXL - 1; i>=0;i--){
		if(nivel[u] - (1 << i) >= nivel[v]) u = ancestral[u][i];
	}
	
	if(u == v) return u;

	for(int i=MAXL-1;i>=0;i--){
		if(ancestral[u][i] != -1 and ancestral[u][i] != ancestral[v][i]){
			u = ancestral[u][i];
			v = ancestral[v][i];
		}
	}
	return pai[u];
}


int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin >> n;
	for(int i=0;i<n-1;i++){
		int a,b;
		cin >> a >> b;
		vec[a].pb(b);
		vec[b].pb(a);
	}

	build();

	cout << nivel[3] + nivel[5] << endl;

	return 0;
}
